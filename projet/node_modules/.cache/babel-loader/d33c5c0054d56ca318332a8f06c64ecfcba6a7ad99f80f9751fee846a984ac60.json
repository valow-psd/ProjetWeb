{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getRequest, postRequest, patchRequest } from '../service/axios.service';\nimport myaxios from '../service/axios.service';\nasync function getAllOrgs() {\n  let result = {\n    error: 0,\n    status: 200,\n    data: null\n  };\n  let response = await getRequest('/orgs/get', 'GETALLORGS');\n  if (response.error === 0) {\n    let orgs = [];\n    response.data.forEach(c => orgs.push(Orgs.fromAPI(c)));\n    result.data = orgs;\n  } else result = response;\n  return result;\n}\nconst createOrganisation = org => {\n  return myaxios.post(\"orgs/create\", org);\n};\nasync function getOrgsById(id) {\n  let result = {\n    error: 0,\n    status: 200,\n    data: null\n  };\n  let url = \"/orgs/getbyid/\" + id;\n  let response = await getRequest(url, {\n    headers: \"teams's secret here\"\n  });\n  if (response.error === 0) {\n    let orgs = [];\n    response.data.forEach(c => orgs.push(Orgs.fromAPI(c)));\n    result.data = orgs;\n  } else result = response;\n  return result;\n}\nasync function addTeam() {\n  let result = {\n    error: 0,\n    status: 200,\n    data: null\n  };\n  let TeamsToAdd = {\n    idTeam: \"id_team\"\n  };\n  let response = await myaxios.patch('/orgs/addteam', TeamsToAdd, {\n    headers: \"teams's secret here\"\n  });\n  if (response.error != 0) {\n    result.error = 1;\n    result.data = response.error;\n  }\n  return result;\n}\nasync function removeTeam() {\n  let result = {\n    error: 0,\n    status: 200,\n    data: null\n  };\n  let TeamsToRemove = {\n    idTeam: \"id_team\"\n  };\n  let response = await myaxios.patch('/orgs/removeteam', TeamsToRemove, {\n    headers: \"teams's secret here\"\n  });\n  if (response.error != 0) {\n    result.error = 1;\n    result.data = response.error;\n  }\n  return result;\n}","map":{"version":3,"names":["getRequest","postRequest","patchRequest","myaxios","getAllOrgs","result","error","status","data","response","orgs","forEach","c","push","Orgs","fromAPI","createOrganisation","org","post","getOrgsById","id","url","headers","addTeam","TeamsToAdd","idTeam","patch","removeTeam","TeamsToRemove"],"sources":["C:/Users/valys/Documents/S4/Web/ProjetWeb/projet/src/service/organisations.service.js"],"sourcesContent":["import {getRequest ,postRequest  ,patchRequest} from '../service/axios.service'\r\nimport myaxios from '../service/axios.service'\r\n\r\n\r\nasync function getAllOrgs() {\r\n    let result = {error: 0, status: 200, data: null}\r\n    let response = await getRequest('/orgs/get', 'GETALLORGS')\r\n    if (response.error === 0) {\r\n        let orgs = []\r\n        response.data.forEach(c => orgs.push(Orgs.fromAPI(c)))\r\n        result.data = orgs\r\n    }\r\n    else result = response\r\n    return result\r\n }\r\n \r\n \r\nconst createOrganisation = (org) => {\r\n    return myaxios.post(\"orgs/create\", org);\r\n}\r\n \r\n \r\n async function getOrgsById(id ) {\r\n    let result = {error: 0, status: 200, data: null}\r\n    let url = \"/orgs/getbyid/\" + id \r\n    let response = await getRequest(url, {headers : \"teams's secret here\" } )\r\n    if (response.error === 0) {\r\n        let orgs = []\r\n        response.data.forEach(c => orgs.push(Orgs.fromAPI(c)))\r\n        result.data =  orgs\r\n    }\r\n    else result = response\r\n    return result\r\n }\r\n\r\n async function addTeam() {\r\n    let result = {error: 0, status: 200, data: null}\r\n    let TeamsToAdd = { idTeam: \"id_team\"}\r\n    let response = await myaxios.patch('/orgs/addteam', TeamsToAdd , {headers : \"teams's secret here\" } )\r\n    if (response.error != 0) {\r\n       result.error=1 \r\n       result.data=response.error\r\n    }\r\n    return result\r\n }\r\n \r\n async function removeTeam() {\r\n    let result = {error: 0, status: 200, data: null}\r\n    let TeamsToRemove = { idTeam: \"id_team\"}\r\n    let response = await myaxios.patch('/orgs/removeteam', TeamsToRemove , {headers : \"teams's secret here\" })\r\n    if (response.error != 0) {\r\n       result.error=1 \r\n       result.data=response.error\r\n    }\r\n    return result\r\n }"],"mappings":";AAAA,SAAQA,UAAU,EAAEC,WAAW,EAAGC,YAAY,QAAO,0BAA0B;AAC/E,OAAOC,OAAO,MAAM,0BAA0B;AAG9C,eAAeC,UAAUA,CAAA,EAAG;EACxB,IAAIC,MAAM,GAAG;IAACC,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAI,CAAC;EAChD,IAAIC,QAAQ,GAAG,MAAMT,UAAU,CAAC,WAAW,EAAE,YAAY,CAAC;EAC1D,IAAIS,QAAQ,CAACH,KAAK,KAAK,CAAC,EAAE;IACtB,IAAII,IAAI,GAAG,EAAE;IACbD,QAAQ,CAACD,IAAI,CAACG,OAAO,CAACC,CAAC,IAAIF,IAAI,CAACG,IAAI,CAACC,IAAI,CAACC,OAAO,CAACH,CAAC,CAAC,CAAC,CAAC;IACtDP,MAAM,CAACG,IAAI,GAAGE,IAAI;EACtB,CAAC,MACIL,MAAM,GAAGI,QAAQ;EACtB,OAAOJ,MAAM;AAChB;AAGD,MAAMW,kBAAkB,GAAIC,GAAG,IAAK;EAChC,OAAOd,OAAO,CAACe,IAAI,CAAC,aAAa,EAAED,GAAG,CAAC;AAC3C,CAAC;AAGA,eAAeE,WAAWA,CAACC,EAAE,EAAG;EAC7B,IAAIf,MAAM,GAAG;IAACC,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAI,CAAC;EAChD,IAAIa,GAAG,GAAG,gBAAgB,GAAGD,EAAE;EAC/B,IAAIX,QAAQ,GAAG,MAAMT,UAAU,CAACqB,GAAG,EAAE;IAACC,OAAO,EAAG;EAAsB,CAAC,CAAE;EACzE,IAAIb,QAAQ,CAACH,KAAK,KAAK,CAAC,EAAE;IACtB,IAAII,IAAI,GAAG,EAAE;IACbD,QAAQ,CAACD,IAAI,CAACG,OAAO,CAACC,CAAC,IAAIF,IAAI,CAACG,IAAI,CAACC,IAAI,CAACC,OAAO,CAACH,CAAC,CAAC,CAAC,CAAC;IACtDP,MAAM,CAACG,IAAI,GAAIE,IAAI;EACvB,CAAC,MACIL,MAAM,GAAGI,QAAQ;EACtB,OAAOJ,MAAM;AAChB;AAEA,eAAekB,OAAOA,CAAA,EAAG;EACtB,IAAIlB,MAAM,GAAG;IAACC,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAI,CAAC;EAChD,IAAIgB,UAAU,GAAG;IAAEC,MAAM,EAAE;EAAS,CAAC;EACrC,IAAIhB,QAAQ,GAAG,MAAMN,OAAO,CAACuB,KAAK,CAAC,eAAe,EAAEF,UAAU,EAAG;IAACF,OAAO,EAAG;EAAsB,CAAC,CAAE;EACrG,IAAIb,QAAQ,CAACH,KAAK,IAAI,CAAC,EAAE;IACtBD,MAAM,CAACC,KAAK,GAAC,CAAC;IACdD,MAAM,CAACG,IAAI,GAACC,QAAQ,CAACH,KAAK;EAC7B;EACA,OAAOD,MAAM;AAChB;AAEA,eAAesB,UAAUA,CAAA,EAAG;EACzB,IAAItB,MAAM,GAAG;IAACC,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAI,CAAC;EAChD,IAAIoB,aAAa,GAAG;IAAEH,MAAM,EAAE;EAAS,CAAC;EACxC,IAAIhB,QAAQ,GAAG,MAAMN,OAAO,CAACuB,KAAK,CAAC,kBAAkB,EAAEE,aAAa,EAAG;IAACN,OAAO,EAAG;EAAsB,CAAC,CAAC;EAC1G,IAAIb,QAAQ,CAACH,KAAK,IAAI,CAAC,EAAE;IACtBD,MAAM,CAACC,KAAK,GAAC,CAAC;IACdD,MAAM,CAACG,IAAI,GAACC,QAAQ,CAACH,KAAK;EAC7B;EACA,OAAOD,MAAM;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}