{"ast":null,"code":"import { mapActions, mapState } from \"vuex\";\n\n//import {  mapActions } from 'vuex';\nexport default {\n  name: 'OrganisationComponents',\n  data: () => ({\n    phrase_secrete: \"\",\n    columns: [\"name\"],\n    display_button: false,\n    items: {},\n    orgName: \"\",\n    orgNameRules: [v => !!v || \"Un nom d'orga est requis\"],\n    orgPhraseRules: [v => !!v || \"Une phrase est requise\"]\n  }),\n  methods: {\n    ...mapActions([\"registerOrga\"]),\n    async registerNouvelleOrga() {\n      const org = {\n        name: this.orgName,\n        secret: this.phrase_secrete\n      };\n      await this.registerOrga(org);\n    }\n  },\n  computed: {\n    getListeOrga() {\n      return this.$store.state.listeOrga;\n    },\n    ...mapState([\"orgs\"])\n  },\n  mounted() {\n    this.$store.dispatch(\"getListeOrga\");\n    //console.log(this.nomOrga , \"totot\")\n  }\n};","map":{"version":3,"names":["mapActions","mapState","name","data","phrase_secrete","columns","display_button","items","orgName","orgNameRules","v","orgPhraseRules","methods","registerNouvelleOrga","org","secret","registerOrga","computed","getListeOrga","$store","state","listeOrga","mounted","dispatch"],"sources":["src/components/OrganisationComponent.vue"],"sourcesContent":["<template>\r\n  <v-container>\r\n    <v-app-bar>\r\n      <v-app-bar-title>\r\n        <p>Organisations</p>\r\n      </v-app-bar-title>\r\n    </v-app-bar>\r\n    <br>\r\n\r\n    <v-btn variant=\"tonal\" @click=\" display_button = !display_button\">\r\n      Ajouter une nouvelle organisation\r\n    </v-btn>\r\n    <br>\r\n\r\n    <v-form @submit.prevent=\"registerOrga\" v-if=display_button>\r\n      <v-text-field v-if=display_button :rules=\"orgPhraseRules\" v-model=\"phrase_secrete\" label=\"Entrez la phrase secrete\" required> </v-text-field>\r\n      <v-text-field\r\n        v-model=\"orgName\"\r\n        :rules=\"orgNameRules\"\r\n        label=\"Nom organisation\"\r\n        required\r\n      ></v-text-field>\r\n      <br>\r\n      <v-btn value=\"actions\" block class=\"mt-2\" @click=\"registerNouvelleOrga\">Ajouter</v-btn>\r\n    </v-form>\r\n\r\n    <br>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th v-for=\"(item, index) in columns\" :key=\"index\">\r\n            {{ item }}\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"ele in getListeOrga\" :key=\"ele.id\">\r\n          <td>{{ ele.name }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </v-container>\r\n</template>\r\n<style>\r\nbody {\r\n  font-family: Helvetica Neue, Arial, sans-serif;\r\n  font-size: 14px;\r\n  color: #444;\r\n}\r\n\r\ntable {\r\n  border: 2px solid #42b983;\r\n  border-radius: 3px;\r\n  background-color: #fff;\r\n}\r\n\r\nth {\r\n  background-color: #42b983;\r\n  color: rgba(255, 255, 255, 0.66);\r\n  cursor: pointer;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n}\r\n\r\ntd {\r\n  background-color: #f9f9f9;\r\n}\r\n\r\nth,\r\ntd {\r\n  min-width: 120px;\r\n  padding: 10px 20px;\r\n}\r\n\r\nth.active {\r\n  color: #fff;\r\n}\r\n\r\nth.active .arrow {\r\n  opacity: 1;\r\n}\r\n\r\ntable{\r\n  margin-left: 100px;\r\n  width: 80%;\r\n}\r\n</style>\r\n  \r\n<script>\r\nimport { mapActions, mapState } from \"vuex\";\r\n\r\n\r\n//import {  mapActions } from 'vuex';\r\nexport default {\r\n  name: 'OrganisationComponents',\r\n  data: () => ({\r\n    phrase_secrete: \"\",\r\n    columns:[\"name\"] ,\r\n    display_button : false ,\r\n    items: {},\r\n    orgName: \"\",\r\n    orgNameRules: [\r\n      v => !!v || \"Un nom d'orga est requis\",\r\n    ],\r\n    orgPhraseRules: [\r\n        v => !!v || \"Une phrase est requise\",\r\n    ]\r\n  }),\r\n  methods: {\r\n    ...mapActions([\"registerOrga\"]),\r\n    async registerNouvelleOrga(){\r\n      const org = {\r\n        name: this.orgName,\r\n        secret: this.phrase_secrete\r\n      };\r\n      await this.registerOrga(org);\r\n    }\r\n  },\r\n  computed: {\r\n    getListeOrga() {\r\n      return this.$store.state.listeOrga\r\n    },\r\n    ...mapState([\"orgs\"]),\r\n  },\r\n  mounted() {\r\n    this.$store.dispatch(\"getListeOrga\")\r\n    //console.log(this.nomOrga , \"totot\")\r\n  }\r\n}\r\n\r\n</script>\r\n  \r\n  "],"mappings":"AA2FA,SAAAA,UAAA,EAAAC,QAAA;;AAGA;AACA;EACAC,IAAA;EACAC,IAAA,EAAAA,CAAA;IACAC,cAAA;IACAC,OAAA;IACAC,cAAA;IACAC,KAAA;IACAC,OAAA;IACAC,YAAA,GACAC,CAAA,MAAAA,CAAA,+BACA;IACAC,cAAA,GACAD,CAAA,MAAAA,CAAA;EAEA;EACAE,OAAA;IACA,GAAAZ,UAAA;IACA,MAAAa,qBAAA;MACA,MAAAC,GAAA;QACAZ,IAAA,OAAAM,OAAA;QACAO,MAAA,OAAAX;MACA;MACA,WAAAY,YAAA,CAAAF,GAAA;IACA;EACA;EACAG,QAAA;IACAC,aAAA;MACA,YAAAC,MAAA,CAAAC,KAAA,CAAAC,SAAA;IACA;IACA,GAAApB,QAAA;EACA;EACAqB,QAAA;IACA,KAAAH,MAAA,CAAAI,QAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}